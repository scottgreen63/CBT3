@inherits LayoutComponentBase
@using CBT3_Application.Messaging.Commands
@using CBT3_Domain.Common
@using CBT3_Domain.Entities
@using CBT_UI.Components.Pages.Shared
@using Radzen
@using Radzen.Blazor
@using System.Diagnostics;

@inject Radzen.DialogService _dialogService
@inject IJSRuntime _jsRuntime
@inject CBT3_UI.CBT3_App _cbtApp
@inject CBT3_Application.Interfaces.IMediator _mediator
@inject NavigationManager _navManager

<style>
     .admin-button {
        opacity: 0;
        position: fixed;
        font-size: 24px; /* Adjust button font size as needed */
        padding: 10px 20px; /* Adjust button padding as needed */
        border: none;
        z-index: 9999;
       /*  pointer-events: auto */
    }
    /* Button positions */
    .admin-button-top-left {
        top: 0;
        left: 0;
    }

    .admin-button-top-right {
        top: 0;
        right: 0;
    }

    .admin-button-bottom-left {
        bottom: 0;
        left: 0;
    }

    .admin-button-bottom-right {
        bottom: 0;
        right: 0;
    }
</style>
<script>
    function closeWindow() {
        window.close();
    }
    function openNewWindow() {
      window.open('https://localhost:7230/', '_blank'); // Replace 'https://example.com' with the URL you want to open
      
    }
</script>
<RadzenDialog></RadzenDialog>
<div class="page">
    @* <div class="sidebar">
        <NavMenu />
    </div> *@
    <button class="admin-button admin-button-top-left" @onclick="() => AdminButtonClicked(0)">Button 1</button>
    <button class="admin-button admin-button-top-right" @onclick="() => AdminButtonClicked(1)">Button 2</button>
    <button class="admin-button admin-button-bottom-left" @onclick="() => AdminButtonClicked(2)">Button 3</button>
    <button class="admin-button admin-button-bottom-right" @onclick="() => AdminButtonClicked(3)">Button 4</button>
    <main>
        @* <div class="top-row px-4" style="background-color:transparent">
           <Toolbar/>
        </div> *@
        <div class="d-flex justify-content-between px-4 top-row" style="background-color: transparent">
            <div>
                <TraineeCourseToolbar/>
                <!-- Content here -->
            </div>
            <div>
                <!-- Right-aligned content -->
                <SessionToolbar />
            </div>
        </div>
        <article class="content px-4">
            @Body
            
                
           
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code{
    [CascadingParameter]
    public CascadingAppState AppState { get; set; }

    private bool[] adminbuttonClicked = new bool[4];

    private void AdminButtonClicked(int index)
    {
        adminbuttonClicked[index] = true;

        // Check if all buttons have been clicked
        if (adminbuttonClicked.All(x => x))
        {
            ShowAdmin();
        }
    }
    private async void ShowAdmin()
    {
        for (int i = 0; i < adminbuttonClicked.Length; i++)
        {
            adminbuttonClicked[i] = false;
        }

        bool dialog = await _dialogService.OpenAsync<AdminNumPad>($"Admin Pass Code",
            new Dictionary<string, object>() { },
            new DialogOptions() { Width = "500", Height = "700", Resizable = false, Draggable = false, ShowClose = true, ShowTitle = false, CssClass = "admin-dialog" });

        if(dialog)
        {
            if (_cbtApp.Trainee is not null && _cbtApp.Course is not null)
            {
                TraineeID traineeId = new(_cbtApp.Trainee.Id.Value);
                CourseID courseId = new(_cbtApp.Course.Id.Value);

                CourseCompletionCommand request = new CourseCompletionCommand(traineeId, courseId, _cbtApp.CoursePass);

                var result = Task.Run(() => _mediator.SendAsync<Result<bool>>(request, default)).Result;
            }


            await CloseAndRelaunchBrowser();
        }
        else
        {
            await _dialogService.Alert("Admin Passcode was incorrect", "Admin Passcode");

        }



    }
    private async Task CloseAndRelaunchBrowser()
    {
        // Close the current browser window
        // _jsRuntime.InvokeVoidAsync("closeWindow");

        // // Wait for a short duration to ensure the window is closed before opening a new one
        // await Task.Delay(3000); // Adjust the delay duration as needed

        // Call JavaScript function to open a new browser window
        AppState.SetProperty(this, "Trainee", null);
        AppState.SetProperty(this, "Course", null);
        AppState.SetProperty(this, "LessonPage", null);
        AppState.SetProperty(this, "CoursePass", false);
        AppState.SetProperty(this, "Session", string.Empty);

        // _cbtApp.Trainee = null;
        // _cbtApp.Course = null;
        // _cbtApp.LessonPage = null;
        // _cbtApp.CoursePass = false;
        // _cbtApp.Session = string.Empty;

        _navManager.NavigateTo("/");
        
    }
    


    }