@page "/sidacourseselection"
@using CBT3_Application.Interfaces
@using CBT3_Domain.Entities
@using CBT3_Domain.Interfaces

@using CBT3_UI
@using Radzen
@inject NavigationManager _navManager
@inject IMediator _mediator
@inject Radzen.DialogService _dialogService
@inject CBT3_App _cbtApp
@rendermode InteractiveServer
<style>

    .button-container {
        display: inline-block;
        justify-content: center; /* Center items horizontally */
    }

    .sida-button-style {
        width: 210px;
        height: 304px;
        font-size: 18px; /* Adjust font size for larger text */
        background-color: transparent !important;
        border: 1px solid transparent;
        color: #ffffff !important;
        margin: 0 10px; /* Add margin to create gap between buttons */
    }

    .button-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 10px; /* Adjust the gap between buttons as needed */
        position: fixed;
        justify-content: center;
    }

    .radzen-row {
        height: 320px; /* Set a fixed height for the RadzenRow */
        overflow: hidden;
    }

    .button-style {
        width: 320px; /* Adjusted width for a larger button */
        height: 120px; /* Adjusted height for a taller button */
        font-size: 18px; /* Adjust font size for larger text */
        background-color: #006AA9 !important;
        color: #ffffff !important;
    }

</style>



<div style="text-align: center;font-size: 18px;">
    <h3><b>SIDA TRAINING</b></h3>
    <br />
</div>
<RadzenRow JustifyContent="Radzen.JustifyContent.Center" AlignItems="Radzen.AlignItems.Center" class="radzen-row">

    @foreach (Course course in _sidaCourses)
    {
        string colorName = ExtractColorName(course.CourseName);
        <RadzenColumn Size="3">
            <RadzenButton Text="@course.CourseName"  class="sida-button-style">
                <RadzenImage Path="@GetImageForColor(colorName)" alt="Color Image" Click="() => HandleCourseSelectionClick(course)" Style="border:thick;border-color:black" />
            </RadzenButton>
        </RadzenColumn>
    }
</RadzenRow>

<br />
<br />
<br />
<br />
<RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="Radzen.JustifyContent.Center" Gap="0.5rem">
    <RadzenButton Click="@((args) => _dialogService.Close(false))" Variant="Radzen.Variant.Filled" ButtonStyle="Radzen.ButtonStyle.Dark" Text="BACK" class="btn button-style" />
</RadzenStack>


@code {
    [CascadingParameter]
    public CascadingAppState AppState { get; set; }

    [Parameter]
    public List<Course> SIDACourses { get; set; }

    [Parameter]
    public string TraineeId { get; set; }
    private string _traineeId;

    private List<Course> _sidaCourses;

    protected override async Task OnInitializedAsync()
    {
        _sidaCourses = SIDACourses;
        _traineeId = TraineeId;

        await base.OnInitializedAsync();
    }

    string GetImageForColor(string colorName)
    {
        // Map color names to image URLs
        var colorImageMap = new Dictionary<string, string>
        {
            { "Blue", "./images/blue.jpg" },
            { "Red", "./images/red.jpg" },
            { "Purple", "./images/purple.jpg" },
            { "Gray", "./images/gray.jpg" }
        };

        // Default image URL if color name doesn't match
        var defaultImageUrl = "default-image-url.png";

        // Get the corresponding image URL based on the color name
        return colorImageMap.TryGetValue(colorName, out var imageUrl) ? imageUrl : defaultImageUrl;
    }
    string ExtractColorName(string courseName)
    {
        int openParenthesisIndex = courseName.LastIndexOf('(');
        int closeParenthesisIndex = courseName.LastIndexOf(')');

        if (openParenthesisIndex != -1 && closeParenthesisIndex != -1 && closeParenthesisIndex > openParenthesisIndex)
        {
            int colorNameLength = closeParenthesisIndex - openParenthesisIndex - 1;
            if (colorNameLength > 0)
            {
                return courseName.Substring(openParenthesisIndex + 1, colorNameLength).Trim();
            }
        }

        return string.Empty; // Default if color name not found
    }
    private Radzen.ConfirmOptions _confirmOptions = new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No", ShowClose = false };
    private async Task<bool> ShowConfirmation(string message)
    {
        var parameters = new Dictionary<string, object>();
        MarkupString htmlMessage = new MarkupString(@"<div style=""font-size:18px; text-align: center;""><b>Is this Correct ?</b></div>");
        parameters.Add("ContentText", htmlMessage);
        parameters.Add("CssClass", "radzen-dialog");
        bool? result = await _dialogService.Confirm(htmlMessage.ToString(), message, _confirmOptions);

        if (result is not null)
        {
            if (result.Value)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    }


    private async Task HandleCourseSelectionClick(Course course)
    {
        string _courseId = course.Id.Value;
        bool confirmed = await ShowConfirmation(course.CourseName);
        if (confirmed)
        {
            _cbtApp.Course = course;
            UpdateToolBarMessage(course);
            _navManager.NavigateTo($"/courseplayer/{_traineeId}/{_courseId}");
            return;
        }

    }


    private void UpdateToolBarMessage(Course course)
    {

        AppState.SetProperty(this, "Course", course);
    }
}
