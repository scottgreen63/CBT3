@page "/MCIA"
@using CBT3_Application.Interfaces
@using CBT3_Domain.Entities
@using CBT3_Domain.Interfaces


@using CBT3_UI.Components.Shared
@using Radzen
@inject NavigationManager _navManager
@inject IMediator _mediator
@inject IMessenger _eventaggregator;
@inject DialogService _dialogService
<style>

    .button-container {
        display: inline-block;
        justify-content: center; /* Center items horizontally */
    }

    .sida-button-style {
        width: 210px;  
        height:304px;
        font-size: 18px; /* Adjust font size for larger text */
        background-color: transparent !important;
        border: 1px solid transparent;
        color: #ffffff !important;
        margin: 0 10px; /* Add margin to create gap between buttons */
    }

    .button-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 10px; /* Adjust the gap between buttons as needed */
        position: fixed;
        justify-content: center;
    }

    .radzen-row {
        height: 320px; /* Set a fixed height for the RadzenRow */
        overflow: hidden;
    }

    .button-style {
        width: 320px; /* Adjusted width for a larger button */
        height: 120px; /* Adjusted height for a taller button */
        font-size: 18px; /* Adjust font size for larger text */
        background-color: #006AA9 !important;
        color: #ffffff !important;
    }

    .radzen-dialog {
        /* background-color: rgba(28, 62, 98, 0.5); */
        background-color: white;
        padding: 20px; /* Add padding as needed */
    }

    .rz-dialog-confirm-buttons > .rz-secondary {
        width: 220px;
        color: #ffffff !important;
        height: 60px;
        font-size: 18px;
        background-color: red !important;
    }

    .rz-dialog-confirm-buttons > .rz-primary {
        width: 220px;
        color: #ffffff !important;
        height: 60px;
        font-size: 18px;
        background-color: #006AA9 !important;
    }
   
</style>

<div style="text-align: center;font-size: 18px;">
    <h3><b>MultipleChoiceWithImageAnswer</b></h3>
    <br />
</div>
    <RadzenRow JustifyContent="Radzen.JustifyContent.Center" AlignItems="Radzen.AlignItems.Center" class="radzen-row">
    
    @foreach (Answer answer in _answers)
    {
        <RadzenColumn Size="3">
            <RadzenButton Text="@answer.AnswerText" Click="() => HandleAnswerSelectionClick(answer)" class="sida-button-style">
                <RadzenImage Path="@answer.AnswerImage" alt="Color Image" Click="() => HandleAnswerSelectionClick(answer)" Style="border:thick;border-color:black" />
            </RadzenButton>
            </RadzenColumn>
    }
    </RadzenRow>

<br />
<br />
<br />
<br />
    <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="Radzen.JustifyContent.Center" Gap="0.5rem">
    <RadzenButton Click="@((args) => _dialogService.Close(false))" Variant="Radzen.Variant.Filled" ButtonStyle="Radzen.ButtonStyle.Dark" Text="BACK" class="btn button-style" />
    </RadzenStack>


@code {
    [Parameter]
    public List<Answer> Answers { get; set; }
    private List<Answer> _answers;
    private Radzen.ConfirmOptions _confirmOptions = new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No", ShowClose = false };

    protected override async Task OnInitializedAsync()
    {
        _answers = Answers;
        await base.OnInitializedAsync();
    }

    private async void HandleAnswerSelectionClick(Answer answer)
    {
        await ShowConfirmation(answer.AnswerText);

        //_navManager.NavigateTo($"/lessonquizcomponent/{course.Id}");
    }
    private async Task ShowConfirmation(string message)
    {
        MarkupString htmlMessage = new MarkupString(@"<div style=""font-size:18px; text-align: center;""><b>Is this Correct ?</b></div>");
        var parameters = new Dictionary<string, object>();
        parameters.Add("ContentText", htmlMessage);
        parameters.Add("CssClass", "radzen-dialog");
        var dialog = await _dialogService.Confirm(htmlMessage.ToString(), message, _confirmOptions);
        if (dialog.Value)
        {

        }
    }

    

    string GetImageForColor(string colorName)
    {
        // Map color names to image URLs
        var colorImageMap = new Dictionary<string, string>
        {
            { "Blue", "./images/blue.jpg" },
            { "Red", "./images/red.jpg" },
            { "Purple", "./images/purple.jpg" },
            { "Gray", "./images/gray.jpg" }
        };

        // Default image URL if color name doesn't match
        var defaultImageUrl = "default-image-url.png";

        // Get the corresponding image URL based on the color name
        return colorImageMap.TryGetValue(colorName, out var imageUrl) ? imageUrl : defaultImageUrl;
    }
    string ExtractColorName(string courseName)
    {
        int openParenthesisIndex = courseName.LastIndexOf('(');
        int closeParenthesisIndex = courseName.LastIndexOf(')');

        if (openParenthesisIndex != -1 && closeParenthesisIndex != -1 && closeParenthesisIndex > openParenthesisIndex)
        {
            int colorNameLength = closeParenthesisIndex - openParenthesisIndex - 1;
            if (colorNameLength > 0)
            {
                return courseName.Substring(openParenthesisIndex + 1, colorNameLength).Trim();
            }
        }

        return string.Empty; // Default if color name not found
    }
}
